package dialogs;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import myModels.UsersComboBoxModel;
import dao.UserDAO;
import entities.AppUser;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */

/*
 * LoginDialog.java
 *
 * Created on 01/10/2009, 11:09:58 ص
 */
/**
 *
 * @author alilo
 */
public class LoginDialog extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed.
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed.
     */
    public static final int RET_OK = 1;
    /**
     * Returned if the Password is incorrect.
     */
    public static final int INCORRECT_PW = 2;
    private UsersComboBoxModel userComboBoxModel;
    private static AppUser user;
    private final WaitForInitialisation waitForInit = new WaitForInitialisation(0);

    /**
     * Creates new form LoginDialog
     *
     * @param parent
     * @param modal
     */
    public LoginDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        if (parent != null && parent.isVisible()) {
            setLocationRelativeTo(parent);
        } else {
            setLocationRelativeTo(null);
        }
        pwField.requestFocus();
    }

    public void initUsers() {
        userComboBoxModel = new UsersComboBoxModel();
        userComboBox.setModel(userComboBoxModel);
    }

    public static AppUser getUser() {
        if (user == null) {
            AppUser usr = UserDAO.getInstance().getObjectByID(10);
            return usr;
        }
        return user;
    }

    public static boolean isLoginAsAdmin() {
        return getUser().getUserGp().getId() == 1;
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    synchronized public void setProgress(final int val) {
        synchronized (this) {
            initProgressBar.setValue(val);
            waitForInit.resume(val);
        }
    }
    public Action cancelAction = new AbstractAction("Annuler") {

        @Override
        public void actionPerformed(ActionEvent e) {
            cancel();
        }
    };

    public void cancel() {
        if (JOptionPane.showConfirmDialog(this, "Voullez vous vraiment quiter?", "Attention!!!", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            doClose(RET_CANCEL);
        }
    }
    public Action okAction = new AbstractAction() {

        @Override
        public void actionPerformed(ActionEvent e) {
            ok();
        }
    };

    public void ok() {

        new Thread(waitForInit) {

            @Override
            public void run() {
                user = userComboBoxModel.getSelectedEntity();
                String password = String.valueOf(pwField.getPassword());
                if (password.equals(user.getPw())) {
                    okButton.setEnabled(false);
                    waitingLabel.setText("Patientez SVP!");
                    login();
                    // Wait for Connection and TablesDAO initialisation // 
                    waitForInit.run();
                    unlock();
                } else {
                    JOptionPane.showMessageDialog(null, "Désolé!\n\tVotre mot de passe est incorrect!", "", JOptionPane.WARNING_MESSAGE);
                    pwField.requestFocus();
                }
            }
        }.start();
    }

    public void login() {
    }

    public void unlock() {
        okButton.setEnabled(true);
        pwField.setText("");
        waitingLabel.setText("Introduit votre mot de passe SVP!");
        doClose(RET_OK);
    }

    /**
     * Lock the current session without changing user.
     */
    public void lock() {
        // Prevent the user change.
        //userComboBox.setEnabled(false);
        logout();
    }

    public void logout() {
        pwField.setText("");
        pwField.requestFocus();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        imagePanel1 = new myComponents.ImagePanel();
        imagePanel3 = new myComponents.ImagePanel();
        userPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userComboBox = new javax.swing.JComboBox();
        pwPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pwField = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        pwPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        initProgressBar = new javax.swing.JProgressBar();
        waitingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        imagePanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        imagePanel1.setImgLocationPath("/res/png/back.png");

        imagePanel3.setImgLocationPath("/res/png/lock2.png");

        javax.swing.GroupLayout imagePanel3Layout = new javax.swing.GroupLayout(imagePanel3);
        imagePanel3.setLayout(imagePanel3Layout);
        imagePanel3Layout.setHorizontalGroup(
            imagePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
        );
        imagePanel3Layout.setVerticalGroup(
            imagePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 79, Short.MAX_VALUE)
        );

        userPanel.setOpaque(false);
        userPanel.setLayout(new javax.swing.BoxLayout(userPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Utilisateur:");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 15));
        userPanel.add(jLabel1);

        userComboBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        userComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Admin", "Vendeur" }));
        userComboBox.setOpaque(false);
        userComboBox.setPreferredSize(new java.awt.Dimension(200, 25));
        userPanel.add(userComboBox);

        pwPanel.setOpaque(false);
        pwPanel.setLayout(new javax.swing.BoxLayout(pwPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Mot de Passe:");
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 15));
        pwPanel.add(jLabel2);

        pwField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pwField.setPreferredSize(new java.awt.Dimension(200, 25));
        pwField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pwFieldKeyTyped(evt);
            }
        });
        pwPanel.add(pwField);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        okButton.setAction(okAction);
        okButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/actions/ok16.png"))); // NOI18N
        okButton.setText("OK!");
        okButton.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.5;
        jPanel1.add(okButton, gridBagConstraints);

        cancelButton.setAction(cancelAction);
        cancelButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/actions/cancel16.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(cancelButton, gridBagConstraints);

        pwPanel1.setOpaque(false);
        pwPanel1.setLayout(new javax.swing.BoxLayout(pwPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Préparation:");
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 15));
        pwPanel1.add(jLabel3);

        initProgressBar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        initProgressBar.setMaximumSize(new java.awt.Dimension(32767, 200));
        initProgressBar.setStringPainted(true);
        pwPanel1.add(initProgressBar);

        waitingLabel.setBackground(new java.awt.Color(204, 255, 204));
        waitingLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        waitingLabel.setText("Introduit votre mot de passe SVP!");

        javax.swing.GroupLayout imagePanel1Layout = new javax.swing.GroupLayout(imagePanel1);
        imagePanel1.setLayout(imagePanel1Layout);
        imagePanel1Layout.setHorizontalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanel1Layout.createSequentialGroup()
                .addGroup(imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(imagePanel1Layout.createSequentialGroup()
                        .addComponent(imagePanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(waitingLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(imagePanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pwPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                            .addComponent(pwPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        imagePanel1Layout.setVerticalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagePanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagePanel1Layout.createSequentialGroup()
                        .addComponent(waitingLabel)
                        .addGap(9, 9, 9)))
                .addGap(18, 18, 18)
                .addComponent(userPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pwPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pwPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(imagePanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        cancel();
    }//GEN-LAST:event_closeDialog

    private void pwFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pwFieldKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            ok();
        }
    }//GEN-LAST:event_pwFieldKeyTyped

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
        if (returnStatus == RET_CANCEL) {
            System.exit(0);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                LoginDialog dialog = new LoginDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private myComponents.ImagePanel imagePanel1;
    private myComponents.ImagePanel imagePanel3;
    private javax.swing.JProgressBar initProgressBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okButton;
    private javax.swing.JPasswordField pwField;
    private javax.swing.JPanel pwPanel;
    private javax.swing.JPanel pwPanel1;
    private javax.swing.JComboBox userComboBox;
    private javax.swing.JPanel userPanel;
    private javax.swing.JLabel waitingLabel;
    // End of variables declaration//GEN-END:variables
    private static int returnStatus = RET_CANCEL;
}

class WaitForInitialisation implements Runnable {

    int progress = 0;

    public WaitForInitialisation(int finish) {
        this.progress = finish;
    }

    @Override
    public void run() {
        synchronized (this) {
            while (progress < 100) {
                try {
                    System.out.println(Thread.currentThread().getName() + " is waiting for initialisation..." + progress);
                    wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(LoginDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    synchronized public void resume(int progress) {
        System.out.println("resuming..." + progress);
        this.progress = progress;
        notifyAll();
    }
}
