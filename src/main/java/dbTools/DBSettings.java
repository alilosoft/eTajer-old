/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbTools;

import dialogs.BackupDBDialog;
import dialogs.RestoreDBDialog;
import dialogs.UpdateDBDialog;
import java.awt.Font;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import javax.swing.plaf.FontUIResource;
import panels.SettingsPanel;

/**
 *
 * @author alilo
 */
public class DBSettings extends SettingsPanel {

    private String hostName, dbPath, dbName;

    /**
     * Creates new form ConnectionSettings
     */
    public DBSettings() {
        super(null);
        initComponents();
        initSettingsPanel(settingsP);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        settingsP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        hostNameF = new myComponents.MyJField();
        localRB = new javax.swing.JRadioButton();
        distantRB = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        dbNameL = new javax.swing.JLabel();
        dbNameF = new myComponents.MyJField();
        restorB = new javax.swing.JButton();
        backupB = new javax.swing.JButton();
        fixeB = new javax.swing.JButton();
        monoRB = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        networkRB = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        dbNameL1 = new javax.swing.JLabel();
        dbPathF = new myComponents.MyJField();
        hostTypeBG = new javax.swing.ButtonGroup();
        appModeBG = new javax.swing.ButtonGroup();

        settingsP.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        java.awt.GridBagLayout settingsPLayout = new java.awt.GridBagLayout();
        settingsPLayout.columnWidths = new int[] {0, 0, 0, 0, 0, 0, 0};
        settingsPLayout.rowHeights = new int[] {0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0};
        settingsP.setLayout(settingsPLayout);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Emplacement de Serveur:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(jLabel1, gridBagConstraints);

        hostNameF.setEditable(false);
        hostNameF.setText("localhost");
        hostNameF.setPreferredSize(new java.awt.Dimension(67, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(hostNameF, gridBagConstraints);

        hostTypeBG.add(localRB);
        localRB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        localRB.setText("Local (Ce PC)");
        localRB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                localRBStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(localRB, gridBagConstraints);

        hostTypeBG.add(distantRB);
        distantRB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        distantRB.setText("Distant (Réseau)");
        distantRB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                distantRBStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(distantRB, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Nom/IP de Serveur: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(jLabel2, gridBagConstraints);

        dbNameL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dbNameL.setText("Nom du Base de Données:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(dbNameL, gridBagConstraints);

        dbNameF.setText("db");
        dbNameF.setPreferredSize(new java.awt.Dimension(24, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        settingsP.add(dbNameF, gridBagConstraints);

        restorB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        restorB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/dbImport24.png"))); // NOI18N
        restorB.setText("Restaurer");
        restorB.setEnabled(false);
        restorB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restorBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(restorB, gridBagConstraints);

        backupB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backupB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/dbBackup24.png"))); // NOI18N
        backupB.setText("Archiver");
        backupB.setEnabled(false);
        backupB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(backupB, gridBagConstraints);

        fixeB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fixeB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/dbFixe24.png"))); // NOI18N
        fixeB.setText("Maintenance");
        fixeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixeBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(fixeB, gridBagConstraints);

        appModeBG.add(monoRB);
        monoRB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        monoRB.setText("Mono-Post");
        monoRB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                monoRBStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        settingsP.add(monoRB, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Mode d'éxecution:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        settingsP.add(jLabel4, gridBagConstraints);

        appModeBG.add(networkRB);
        networkRB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        networkRB.setSelected(true);
        networkRB.setText("Client/Serveur");
        networkRB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                networkRBStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        settingsP.add(networkRB, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(jSeparator1, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Outils de Base de Données ");
        jLabel3.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(jLabel3, gridBagConstraints);

        dbNameL1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dbNameL1.setText("Emplacement de BD: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsP.add(dbNameL1, gridBagConstraints);

        dbPathF.setEditable(false);
        dbPathF.setText("db");
        dbPathF.setPreferredSize(new java.awt.Dimension(24, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        settingsP.add(dbPathF, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void distantRBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_distantRBStateChanged
        hostNameF.setEditable(distantRB.isSelected());
        if (distantRB.isSelected()) {
            hostName = DBManager.getInstance().getHostName();
            hostNameF.setText(hostName);
        }
    }//GEN-LAST:event_distantRBStateChanged

    private void restorBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restorBActionPerformed
        RestoreDBDialog.getInstance().setVisible(true);
    }//GEN-LAST:event_restorBActionPerformed

    private void backupBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupBActionPerformed
        BackupDBDialog.getInstance().setVisible(true);
    }//GEN-LAST:event_backupBActionPerformed

    private void fixeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixeBActionPerformed
        UpdateDBDialog.getInstance().setVisible(true);
    }//GEN-LAST:event_fixeBActionPerformed

    private void networkRBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_networkRBStateChanged
        localRB.setEnabled(networkRB.isSelected());
        distantRB.setEnabled(networkRB.isSelected());
    }//GEN-LAST:event_networkRBStateChanged

    private void monoRBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_monoRBStateChanged
        localRB.setSelected(monoRB.isSelected());
        dbPathF.setEditable(monoRB.isSelected());
        if (monoRB.isSelected()) {
            dbPath = DBManager.getInstance().getDbLocPath();
            dbPathF.setText(dbPath);
        }
    }//GEN-LAST:event_monoRBStateChanged

    private void localRBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_localRBStateChanged
        if (localRB.isSelected()) {
            hostName = DBManager.getInstance().getLocalHost();
            hostNameF.setText(hostName);
        }
    }//GEN-LAST:event_localRBStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup appModeBG;
    private javax.swing.JButton backupB;
    private myComponents.MyJField dbNameF;
    private javax.swing.JLabel dbNameL;
    private javax.swing.JLabel dbNameL1;
    private myComponents.MyJField dbPathF;
    private javax.swing.JRadioButton distantRB;
    private javax.swing.JButton fixeB;
    private myComponents.MyJField hostNameF;
    private javax.swing.ButtonGroup hostTypeBG;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton localRB;
    private javax.swing.JRadioButton monoRB;
    private javax.swing.JRadioButton networkRB;
    private javax.swing.JButton restorB;
    private javax.swing.JPanel settingsP;
    // End of variables declaration//GEN-END:variables

    @Override
    public void loadSettings() {
        if (DBManager.getInstance().getAppMode().equals(DBManager.MONO_POST)) {
            // un-select then select mono radio button to reflect change.
            monoRB.setSelected(false);
            monoRB.setSelected(true);
            restorB.setEnabled(true);
            backupB.setEnabled(true);
        } else {
            networkRB.setSelected(true);
            if (DBManager.getInstance().isLocalHost()) {
                localRB.setSelected(false);
                localRB.setSelected(true);
                restorB.setEnabled(true);
                backupB.setEnabled(true);
            } else {
                distantRB.setSelected(false);
                distantRB.setSelected(true);
                restorB.setEnabled(false);
                backupB.setEnabled(false);
            }
        }
        dbName = DBManager.getInstance().getDbName();
        dbNameF.setText(dbName);
    }

    @Override
    public boolean saveSettings() {
        if (monoRB.isSelected()) {
            DBManager.getInstance().setAppMode(DBManager.MONO_POST);
            dbPath = dbPathF.getText().trim();
            if (dbPath.length() == 0) {
                JOptionPane.showMessageDialog(this, "Entrée le chemin ou se trouve la base de données SVP!");
                dbPathF.requestFocus();
                return false;
            }else{
                DBManager.getInstance().setDbLocPath(dbPath);
            }
        } else {
            DBManager.getInstance().setAppMode(DBManager.CLIENT_SRV);
            if (localRB.isSelected()) {
                DBManager.getInstance().setHostType(DBManager.LOCAL);
            } else {
                hostName = hostNameF.getText().trim();
                if (hostName.length() == 0) {
                    JOptionPane.showMessageDialog(this, "Entrée le nom ou l'@ IP du Serveur SVP!");
                    hostNameF.requestFocus();
                    return false;
                }
                try {
                    if (InetAddress.getByName(hostName).isReachable(1000)) {
                        restorB.setEnabled(true);
                        backupB.setEnabled(false);
                    }
                } catch (UnknownHostException ex) {
                } catch (IOException ex) {
                }
                DBManager.getInstance().setHostType(DBManager.DISTANT);
                DBManager.getInstance().setHostName(hostName);
            }
        }

        dbName = dbNameF.getText().trim();
        if (dbName.length() == 0) {
            JOptionPane.showMessageDialog(this, "Entrée le nom de la base de données SVP!");
            dbNameF.requestFocus();
            return false;
        }
        DBManager.getInstance().setDbName(dbName);
        return true;
    }

    public static void main(String args[]) {
        DBManager.getInstance().configServer();
    }
}
