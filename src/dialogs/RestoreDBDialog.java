/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FindDialog.java
 *
 * Created on 16/10/2009, 11:39:03 ص
 */
package dialogs;

import dbTools.DBManager;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.zip.ZipFile;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import tools.ExceptionReporting;

/**
 *
 * @author alilo
 */
public class RestoreDBDialog extends dialogs.MyJDialog {

    private static RestoreDBDialog instance;
    private String restorPath;
    private JFileChooser chooser;
    private ZipFile archiveFile;

    /**
     * Creates new form FindDialog
     *
     * @param parent
     * @param modal
     */
    public RestoreDBDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal, false);
        initComponents();
        setLocationRelativeTo(null);
        waitLabel.setVisible(false);

        chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".tjr");
            }

            @Override
            public String getDescription() {
                return "Selectionner un archive (.tjr)";
            }
        });
        chooser.setAcceptAllFileFilterUsed(false);
        restorPath = DBManager.getInstance().getBackupDir();
        chooser.setCurrentDirectory(new File(restorPath));
        //pathField.setText(restorPath);
    }

    public static RestoreDBDialog getInstance() {
        if (instance == null) {
            return new RestoreDBDialog(null, true);
        } else {
            return instance;
        }
    }

    public void setRestorPath(String restorPath) {
        this.restorPath = restorPath;
        try {
            setArchiveFile(new ZipFile(restorPath));
        } catch (IOException ex) {
            ExceptionReporting.showException(ex);
        }
    }
    
    public void setArchiveFile(ZipFile archiveFile) {
        this.archiveFile = archiveFile;
        pathArea.setText("A partire: "+archiveFile.getName());
    }

    /**
     * Satart backing up dabase .
     */
    public void startImport() {
        while (archiveFile == null) {
            JOptionPane.showMessageDialog(this, "Sélectionner l'archive a réstaurer SVP!", "Attention", JOptionPane.ERROR_MESSAGE);
            browse();
        }
        new Thread(new Runnable() {

            @Override
            public void run() {
                importLinkButton.setVisible(false);
                waitLabel.setVisible(true);
                startAction.setEnabled(false);
                browseAction.setEnabled(false);
                DBManager.getInstance().importBackup(archiveFile);
                setVisible(false);
            }
        }).start();
    }
    private final Action startAction = new AbstractAction() {

        @Override
        public void actionPerformed(ActionEvent e) {
            startImport();
        }
    };

    public void browse() {
        try {
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File f = chooser.getSelectedFile();
                restorPath = f.getCanonicalPath();
                archiveFile = new ZipFile(f);
                //pathField.setText("A partire: "+restorPath);
                pathArea.setText("A partire: "+restorPath);
            }
        } catch (IOException ex) {
            ExceptionReporting.showException(ex);
        }
    }
    private final Action browseAction = new AbstractAction() {

        @Override
        public void actionPerformed(ActionEvent e) {
            browse();
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        imagePanel1 = new myComponents.ImagePanel();
        titleLabel = new javax.swing.JLabel();
        imagePanel2 = new myComponents.ImagePanel();
        browseLinkButton = new com.l2fprod.common.swing.JLinkButton();
        waitLabel = new javax.swing.JLabel();
        importLinkButton = new com.l2fprod.common.swing.JLinkButton();
        pathArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Restauration");
        setModal(true);
        setPreferredSize(new java.awt.Dimension(400, 450));
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        imagePanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        imagePanel1.setImgLocationPath("/res/png/back2.png");
        imagePanel1.setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Restauration de vos données");
        titleLabel.setMinimumSize(new java.awt.Dimension(261, 40));
        titleLabel.setPreferredSize(new java.awt.Dimension(278, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        imagePanel1.add(titleLabel, gridBagConstraints);

        imagePanel2.setImgLocationPath("/res/icons/dbImport128.png");
        imagePanel2.setLayout(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        imagePanel1.add(imagePanel2, gridBagConstraints);

        browseLinkButton.setAction(browseAction);
        browseLinkButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 3, 1, 3));
        browseLinkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/actions/browse24.png"))); // NOI18N
        browseLinkButton.setText("Selectionner le fichier d'archive par ici!");
        browseLinkButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        browseLinkButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        imagePanel1.add(browseLinkButton, gridBagConstraints);

        waitLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        waitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        waitLabel.setText("Restauration en cours patientez SVP! .....");
        waitLabel.setPreferredSize(new java.awt.Dimension(166, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        imagePanel1.add(waitLabel, gridBagConstraints);

        importLinkButton.setAction(startAction);
        importLinkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/actions/reload24.png"))); // NOI18N
        importLinkButton.setText("Clicker ici pour Restaurer");
        importLinkButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        importLinkButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        importLinkButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        imagePanel1.add(importLinkButton, gridBagConstraints);

        pathArea.setEditable(false);
        pathArea.setColumns(20);
        pathArea.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pathArea.setForeground(new java.awt.Color(0, 51, 255));
        pathArea.setLineWrap(true);
        pathArea.setRows(2);
        pathArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
        pathArea.setMinimumSize(new java.awt.Dimension(110, 34));
        pathArea.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        imagePanel1.add(pathArea, gridBagConstraints);

        getContentPane().add(imagePanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        RestoreDBDialog.getInstance().setVisible(true);
        System.exit(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.l2fprod.common.swing.JLinkButton browseLinkButton;
    private myComponents.ImagePanel imagePanel1;
    private myComponents.ImagePanel imagePanel2;
    private com.l2fprod.common.swing.JLinkButton importLinkButton;
    private javax.swing.JTextArea pathArea;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel waitLabel;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
