/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dialogs;

import java.awt.Container;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import tools.ExceptionReporting;

/**
 *
 * @author alilo
 */
public class MyJDialog extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /*
     * A return status code - returned if OK button has been pressed.
     */
    public static final int RET_OK = 1;
    /**
     * Used to hold the returned status.
     */
    private int returnStatus = RET_CANCEL;

    private Container ownerContainer;

    /**
     * Creates new form MyJDialog
     *
     * @param owner
     * @param modal
     * @param undecorated
     */
    public MyJDialog(Container owner, boolean modal, boolean undecorated) {
        super();
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            ExceptionReporting.showException(ex);
        }

        this.ownerContainer = owner;
        setUndecorated(undecorated);
        setModal(modal);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                doOnClose();
            }
        });
    }

    public void show(Container c) {
        setContentPane(c);
        pack();
        setLocationRelativeTo(ownerContainer);
        setVisible(true);
    }

    // Getters
    public Container getOwnerContainer() {
        return ownerContainer;
    }

    public int getReturnStatus() {
        return returnStatus;
    }

    // Setters
    public void setOwnerContainer(Container ownerContainer) {
        this.ownerContainer = ownerContainer;
    }

    public void setReturnStatus(int returnStatus) {
        this.returnStatus = returnStatus;
    }

    /**
     * To Do on Dialog Closing
     */
    public void doOnClose() {
        doClose(RET_CANCEL);
    }

    public void closeDialog() {
        setVisible(false);
        dispose();
    }

    public void doClose(int returnStatus) {
        setReturnStatus(returnStatus);
        closeDialog();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 159, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        doOnClose();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
