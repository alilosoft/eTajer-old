/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FindDialog.java
 *
 * Created on 16/10/2009, 11:39:03 ص
 */
package dialogs;

import static dialogs.MyJDialog.RET_OK;
import entities.EntityClass;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import panels.CRUDPanel;
import panels.MasterDetailsPanel;
import panels.ResultSet2Table_Panel;

/**
 *
 * @author alilo
 */
public class SelectionDialog extends dialogs.MyJDialog {

    private final Dimension screenSize;
    private final int taskBarHeight = 35;

    public SelectionDialog() {
        super(null, true, false);
        initComponents();
        rootPanel.doOnPress(KeyEvent.VK_ENTER, 0, okAction, JComponent.WHEN_IN_FOCUSED_WINDOW);
        rootPanel.doOnPress(KeyEvent.VK_ESCAPE, 0, cancelAction, JComponent.WHEN_IN_FOCUSED_WINDOW);
        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    }

    public void showPanel(CRUDPanel selListPanel, EntityClass defaultSel, Component master) {
        if (isVisible()) {
            return;
        }
        selListPanel.remove(selListPanel.operPanel);
        selListPanel.add(selListPanel.operPanel, BorderLayout.SOUTH);
        selListPanel.reload();
        // config behavior
        if (selListPanel instanceof ResultSet2Table_Panel) {
            ResultSet2Table_Panel rs2TablPnl = (ResultSet2Table_Panel) selListPanel;
            if (defaultSel != null) {
                rs2TablPnl.selectEntity(defaultSel);
            }

            rs2TablPnl.setEnterKeyListener(new KeyAdapter() {

                @Override
                public void keyPressed(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        doClose(RET_OK);
                    }
                }
            });

            rs2TablPnl.setMouseClickListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        doClose(RET_OK);
                    }
                }
            });
        }

        // config appearence
        int x, y, width, height;

        if (selListPanel.getOwnerContainer() != null && selListPanel.getOwnerContainer() instanceof MasterDetailsPanel) {
            rootPanel.add(selListPanel.getOwnerContainer(), BorderLayout.CENTER);
            width = selListPanel.getOwnerContainer().getPreferredSize().width;
            height = selListPanel.getOwnerContainer().getPreferredSize().height;
        } else {
            rootPanel.add(selListPanel, BorderLayout.CENTER);
            width = selListPanel.getPreferredSize().width;
            height = selListPanel.getPreferredSize().height;
        }

        if (master != null) {
            if (width < master.getWidth()) {
                width = master.getWidth();
            }
            x = master.getLocationOnScreen().x;
            y = master.getLocationOnScreen().y + master.getHeight();

            if (y + height > screenSize.height) {
                if (screenSize.height - y - taskBarHeight > getMinimumSize().height) {
                    height = screenSize.height - y - taskBarHeight;
                } else {
                    y = master.getLocationOnScreen().y - height;
                }
            }

            if (x + width > screenSize.width) {
                x = screenSize.width - width;
            }
            setSize(width, height);
            setLocation(x, y);
        } else {
            setSize(width, height);
            setLocationRelativeTo(null);
        }
        setVisible(true);
    }

    private final Action okAction = new AbstractAction("OK") {

        @Override
        public void actionPerformed(ActionEvent e) {
            doClose(RET_OK);
        }
    };
    private final Action cancelAction = new AbstractAction("Annuler") {

        @Override
        public void actionPerformed(ActionEvent e) {
            doClose(RET_CANCEL);
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootPanel = new myComponents.MyJPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Séléction");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(300, 150));
        setType(java.awt.Window.Type.UTILITY);

        rootPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(rootPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private myComponents.MyJPanel rootPanel;
    // End of variables declaration//GEN-END:variables
}
